<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="member">
    <insert id ="insert" parameterType="memberVO">
        INSERT INTO member (member_name, member_email, member_requiredterm, member_optionalterm)
        VALUES (#{memberName}, #{memberEmail}, #{memberRequiredTerm}, #{memberOptionalTerm})
    </insert>

    <select id="isMailExists" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM member
        WHERE member_email = #{memberEmail}
    </select>

    <select id ="isMemberExist" resultType="boolean">
        SELECT count(*) > 0
        from member
        where member_id = #{memberId}::UUID
    </select>

    <select id="getMemberNickName" resultType="String">
        SELECT member_name
        FROM member
        WHERE member_email = #{email}
    </select>

    <select id="isNickNameExist" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM member
        WHERE member_name = #{name}
    </select>

    <select id="getMemberId" resultType="String">
        SELECT member_id
        FROM member
        WHERE member_email = #{email}
    </select>

    <select id="authenticate" parameterType="map" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM member
        WHERE member_email = #{email}
    </select>

    <select id="getMemberMain" resultType="MemberChallengeDTO">
        SELECT
            c.challenge_no AS challengeNo,
            c.challenge_shortintro AS challengeShortIntro,
            c.challenge_title AS challengeTitle,
            COUNT(m.member_id) AS memberCount
        FROM
            MEMBER m
        INNER JOIN CHALLENGE c
        ON m.challenge_no = c.challenge_no
        WHERE
            m.challenge_no IN (
            SELECT challenge_no FROM MEMBER WHERE member_id = #{memberId}::UUID
            )
        GROUP BY
            c.challenge_no, c.challenge_shortintro, c.challenge_title
    </select>

    <select id="getMemberNext" resultType="MemberChallengeDTO">    SELECT
        c2.challenge_no AS challengeNo,
        c2.challenge_shortintro AS challengeShortIntro,
        c2.challenge_title AS challengeTitle,
        COUNT(m2.member_id) AS memberCount
        FROM
        MEMBER m
        INNER JOIN CHALLENGE c1
        ON m.challenge_no = c1.challenge_no
        INNER JOIN CHALLENGE c2
        ON c1.challenge_group = c2.challenge_group
        AND c2.challenge_no > c1.challenge_no
        LEFT JOIN MEMBER m2
        ON c2.challenge_no = m2.challenge_no
        WHERE
        m.member_id = #{memberId}::UUID
        GROUP BY
        c2.challenge_no, c2.challenge_shortintro, c2.challenge_title
        ORDER BY
        c2.challenge_no ASC
    </select>


    <select id="getMemberComplete" resultType="MemberChallengeDTO">
        SELECT
        c2.challenge_no AS challengeNo,
        c2.challenge_shortintro AS challengeShortIntro,
        c2.challenge_title AS challengeTitle
        FROM
        MEMBER m
        INNER JOIN
        CHALLENGE c1
        ON
        m.challenge_no = c1.challenge_no
        INNER JOIN
        CHALLENGE c2
        ON
        c1.challenge_group = c2.challenge_group
        WHERE
        m.member_id = #{memberId}::UUID
        AND
        c1.challenge_no > c2.challenge_no
        ORDER BY
        c2.challenge_no ASC
    </select>


    <select id="getMemberMission" parameterType="String" resultType="map">
        SELECT
        m.mission_title,
        m.mission_explain
        FROM
        mission AS m
        WHERE
        m.challenge_no = 1
        AND m.mission_no NOT IN (
        SELECT
        c.mission_no
        FROM
        member AS mem
        INNER JOIN
        complete AS c ON mem.member_no = c.member_no
        WHERE
        mem.member_id = #{memberId}::UUID
        )
    </select>

    <delete id="deleteMember" parameterType="String">
        DELETE FROM member WHERE member_id = #{memberId}::UUID
    </delete>

    <update id = "updateUIStart">
        UPDATE member
        SET member_uistart = NOW(),
        challenge_no = #{challengeNo}::bigint
        WHERE member_id = #{memberId}::UUID;
    </update>

    <update id = "updateUXStart">
        UPDATE member
        SET member_uxstart = NOW(),
        challenge_no = #{challengeNo}::bigint
        WHERE member_id = #{memberId}::UUID;
    </update>

    <select id = "getMemberInfo" resultType="map">
        SELECT * FROM member where member_id = #{member_id}::UUID
    </select>

</mapper>